/*
 * Elisa: AI Learning Assistant
 * Â© 2025 Dennis Schulmeister-Zimolong <dennis@wpvs.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 */

import type { Writable }  from "svelte/store";
import type { ChatStore } from "./chat.js";

import { writable }       from "svelte/store";
import { i18n }           from "./i18n.js";

/**
 * Game state managed by the store
 */
export type QuizGame = {
    subject:          string;
    level:            string;
    running:          boolean;
    questions:        Question[];
    currentQuestion?: Question;
    currentIndex:     number;
}

/**
 * Updated game state as received from backend
 */
export type InboundQuizMessageData = {
    subject?:   string,
    level?:     string,
    questions?: Partial<Question>[],
}

/**
 * A single quiz question generated by the LLM
 */
export type Question = {
    number:      number,
    question:    string,
    answers:     string[],
    correct:     number, 
    givenAnswer: string,
    isCorrect:   boolean;
}

/**
 * A singleton store object with the quiz game state. The store content contains the
 * state to be rendered by the UI. The object contains methods to mutate the state.
 */
export class QuizStore {
    /**
     * Sevelte store which holds the game state
     */
    private store: Writable<QuizGame> = writable({
        subject:           "",
        level:             "",
        running:           false,
        questions:         [],
        currentQuestion:   undefined,
        currentIndex:      -1,
    });

    subscribe = this.store.subscribe;
    update    = this.store.update;
    set       = this.store.set;

    private chat!: ChatStore;

    /**
     * Called by the singleton ChatStore instance to avoid circular imports.
     * @param chatStore ChatStore instance
     */
    setChat(chat: ChatStore) {
        this.chat = chat;
    }

    /**
     * Interpret JSON data generated by the LLM to update the game state.
     * @param messageData - Structure quiz data
     */
    updateFromBackend(messageData: InboundQuizMessageData) {
        this.store.update(state => {            
            if (messageData.subject) state.subject = messageData.subject.toString();
            if (messageData.level)   state.level   = messageData.level.toString();

            if (Array.isArray(messageData.questions) && messageData.questions.length) {
                // Assert correct quiz structure and number questions
                outer:
                for (let i = 0; i < messageData.questions.length; i++) {
                    let question = messageData.questions[i];

                    for (let property of ["question", "answers", "correct"]) {
                        if (!Object.hasOwn(question, property)) {
                            delete messageData.questions[i--];
                            continue outer;
                        }
                    }

                    if (
                        (typeof question.question !== "string") || 
                        (typeof question.correct  !== "number")  ||
                        (!Array.isArray(question.answers))
                    ) {    
                        delete messageData.questions[i--];
                        continue outer;
                    }
                    
                    question.number      = i + 1;
                    question.givenAnswer = "";
                    question.isCorrect   = false;

                    for (let j = 0; j < question.answers.length; j++) {
                        question.answers[j] = question.answers[j].toString();
                    }
                }

                state.running         = true;
                state.questions       = messageData.questions as Question[];
                state.currentQuestion = state.questions[0];
                state.currentIndex    = 0;
            } else {
                state.running         = false;
                state.questions       = [];
                state.currentQuestion = undefined;
                state.currentIndex    = -1;
            }

            return state;
        });
    }

    /**
     * Remember the given answer for the current question and request AI feedback,
     * if it was the last question.
     * 
     * @param givenAnswer - Index of the chosen answer
     * @returns Flag, whether the answer is correct
     */
    answer(givenAnswer: number): boolean {
        let isCorrect = false;

        this.store.update(state => {
            if (!state.currentQuestion) return state;

            state.currentQuestion.givenAnswer = state.currentQuestion.answers[givenAnswer] || "";
            state.currentQuestion.isCorrect   = givenAnswer === state.currentQuestion.correct;
            isCorrect = state.currentQuestion.isCorrect;

            if (state.currentIndex >= (state.questions.length - 1)) {
                let prompt = i18n.value.Quiz.PromptFinalFeedback + "\n\n";

                for (let question of state.questions) {
                    prompt += `- ${question.question} -> ${question.givenAnswer}\n`;
                }

                this.chat.sendChatMessage(prompt, true);
            }

            return state;
        });

        return isCorrect;
    }

    /**
     * Update state to display the next question. After the last question the `running`
     * state will be set to `false`, so that the UI can leave the game screen.
     */
    goon() {
        this.store.update(state => {
            if (!state.currentQuestion) return state;

            if (++state.currentIndex >= state.questions.length) {
                state.running      = false;
                state.currentIndex = -1;
            } else {
                state.currentQuestion = state.questions[state.currentIndex];
                state.running = true;
            }

            return state;
        });
    }

    /**
     * Fully reset the game state, starting completely fresh.
     */
    reset() {
        this.store.update(state => {
            state.subject           = "";
            state.level             = "";
            state.running           = false;
            state.questions         = [];
            state.currentQuestion   = undefined;
            state.currentIndex      = -1;
            return state;
        });
    }
}

export default new QuizStore();
