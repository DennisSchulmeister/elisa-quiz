/*
 * Elisa: AI Learning Quiz
 * Â© 2025 Dennis Schulmeister-Zimolong <dennis@wpvs.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 */

import type { Writable } from "svelte/store";
import { writable }      from "svelte/store";

/**
 * Game state managed by the store
 */
export type QuizGame = {
    subject:           string;
    level:             string;
    running:           boolean;
    currentQuestion?:  Question;
    nextQuestions:     Question[];
    previousQuestions: Question[];
    correctAnswers:    number;
}

/**
 * Updated game state as received from backend
 */
export type InboundQuizMessageData = {
    subject?:   string,
    level?:     string,
    questions?: Question[],
}

/**
 * A single quiz question generated by the LLM
 */
export type Question = {
    question?: string,
    answers?:  string[],
    correct?:  number, 
}

/**
 * A singleton store object with the quiz game state. The store content contains the
 * state to be rendered by the UI. The object contains methods to mutate the state.
 */
class QuizStore {
    /**
     * Sevelte store which holds the game state
     */
    private store: Writable<QuizGame> = writable({
        subject:           "",
        level:             "",
        running:           false,
        currentQuestion:   undefined,
        nextQuestions:     [],
        previousQuestions: [],
        correctAnswers:    0,
    });

    subscribe = this.store.subscribe;

    /**
     * Interpret JSON data generated by the LLM to update the game state.
     * @param messageData - Structure quiz data
     */
    updateFromBackend(messageData: InboundQuizMessageData) {
        this.store.update(state => {
            if (messageData.subject) state.subject = messageData.subject;
            if (messageData.level)   state.level   = messageData.level;

            if (Array.isArray(messageData.questions) && messageData.questions.length) {
                state.nextQuestions = [
                    ...state.nextQuestions,
                    ...messageData.questions,
                ];
            }

            if (state.nextQuestions.length) state.running = true;
            return state;
        });
    }

    /**
     * Update state to display the next question. After the last question the `running`
     * state will remain `true`, so that the UI can render a game finished screen.
     * After that the flag will be cleared.
     * 
     * @paras answer - Chosen answer (-1 = skip question)
     * @returns a boolean whether the answer is correct
     */
    goon(answer: number): boolean {
        let correctAnswer = false;

        this.store.update(state => {
            if (state.currentQuestion) {
                correctAnswer = state.currentQuestion?.correct == answer;
                if (correctAnswer) state.correctAnswers += 1;

                state.previousQuestions.push(state.currentQuestion);
                state.currentQuestion = state.nextQuestions.pop();
            } else {
                state.running = false;
                state.nextQuestions = [];
            }

            return state;
        });

        return correctAnswer;
    }

    /**
     * Skip the remaining questions to end the quiz early. This leaves the `running` flag
     * untouched so that the UI can display the game finished view.
     */
    abort() {
        this.store.update(state => {
            if (state.currentQuestion) {
                state.previousQuestions = [...state.previousQuestions, state.currentQuestion, ...state.nextQuestions];
            } else {
                state.previousQuestions = [...state.previousQuestions, ...state.nextQuestions];
            }

            state.currentQuestion = undefined;
            state.nextQuestions   = [];
            
            return state;
        });
    }

    /**
     * Fully reset the game state, starting completely fresh.
     */
    reset() {
        this.store.update(state => {
            state.subject           = "";
            state.level             = "";
            state.running           = false;
            state.currentQuestion   = undefined;
            state.nextQuestions     = [];
            state.previousQuestions = [];
            state.correctAnswers    = 0;

            return state;
        });
    }
}

export default new QuizStore();
