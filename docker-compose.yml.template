services:

  #============================================================================
  # Frontend SPA and reverse proxy
  #
  # This is based on the official Caddy docker image.
  # See: https://hub.docker.com/_/caddy
  #============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # Change these to your specific environment!
      #
      # DOMAIN            = Public domain of the single page app
      # BACKEND_URL       = Public URL of the backend service (usually the same as DOMAIN)
      # BACKEND_HOST/PORT = Internal backend address
      DOMAIN:       lernspiel.online
      BACKEND_URL:  https://lernspiel.online
      BACKEND_HOST: backend
      BACKEND_PORT: 8000

      # If you are running this on a development machine: Make sure to add a port mapping
      # like "8888:80" for the frontend container:
      #DOMAIN:        http://:80
      #BACKEND_URL:   http://localhost:8000
    ports:
      # Serving port 443 enables automatic TLS certificate management.
      # UDP port 443 is for HTTP/3. The others for HTTP/1 and 2.
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      # The volume is needed for the automatic TLS certificate management
      - caddy_data:/data
    cap_add:
      # HTTP/3 performance optimization
      - NET_ADMIN

  #============================================================================
  # Backend service
  #
  # This is based on the official Python docker image.
  # See: https://hub.docker.com/_/python
  #============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    #ports:
      # Note that this container don't needs port-forwarding as it will only
      # be called via the Docker internal network by the frontend server.
      # Unless of course, you run the web server externally.
      #- "8000:8000"
    environment:
      # Insert your API key here!
      UVICORN_HOST:       0.0.0.0
      LLM_CHAT_MODEL:     chatgpt-4o-latest
      LLM_MODEL_PROVIDER: openai
      OPENAI_API_KEY:     sk-...
      MONGODB_URL:        mongodb://mongo:mongo@localhost:27071/?compressors=zstandard,zlib,snappy
      # Usually the below values don't need to be changed.
      #UVICORN_PORT:   8000
      #UVICORN_RELOAD: false
    depends_on:
      - mongodb

  #============================================================================
  # Mongo Database
  #
  # This is based on the official Mongo docker image.
  # See: https://hub.docker.com/_/mongo
  #============================================================================
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      # Change admin credentials!
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - mongo_data:/data/mongo-data:/data/db
      # Change normal database user credentials! The script only runs once when
      # the mongo data directory is empty.
      - ./backend/docker/mongo-users.js:/docker-entrypoint-initdb.d/mongo-users.js

volumes:
  caddy_data:
  mongo_data:
